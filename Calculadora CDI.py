{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c89d8afc-a2d2-4f95-ad2a-0ff7b9e32627",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import messagebox, ttk\n",
    "from datetime import datetime, timedelta\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.backends.backend_pdf import PdfPages\n",
    "import requests\n",
    "import pandas as pd\n",
    "\n",
    "class CDIInvestmentCalculator:\n",
    "    def __init__(self):\n",
    "        self.root = tk.Tk()\n",
    "        self.root.title(\"Calculadora de Investimento CDI\")\n",
    "        self.root.geometry(\"500x400\")\n",
    "        self.setup_ui()\n",
    "        \n",
    "    def setup_ui(self):\n",
    "        # Quadro principal\n",
    "        main_frame = ttk.Frame(self.root, padding=\"20\")\n",
    "        main_frame.pack(fill=tk.BOTH, expand=True)\n",
    "        \n",
    "        # Título\n",
    "        ttk.Label(main_frame, text=\"Calculadora de Investimento CDI\", \n",
    "                 font=('Arial', 16, 'bold')).grid(row=0, column=0, columnspan=2, pady=10)\n",
    "        \n",
    "        # Campos de entrada\n",
    "        ttk.Label(main_frame, text=\"Valor Inicial (R$):\").grid(row=1, column=0, sticky=tk.W, pady=5)\n",
    "        self.initial_value = ttk.Entry(main_frame)\n",
    "        self.initial_value.grid(row=1, column=1, sticky=tk.EW, pady=5)\n",
    "        \n",
    "        ttk.Label(main_frame, text=\"Data Inicial (DD/MM/AAAA):\").grid(row=2, column=0, sticky=tk.W, pady=5)\n",
    "        self.start_date = ttk.Entry(main_frame)\n",
    "        self.start_date.grid(row=2, column=1, sticky=tk.EW, pady=5)\n",
    "        \n",
    "        ttk.Label(main_frame, text=\"Data Final (DD/MM/AAAA):\").grid(row=3, column=0, sticky=tk.W, pady=5)\n",
    "        self.end_date = ttk.Entry(main_frame)\n",
    "        self.end_date.grid(row=3, column=1, sticky=tk.EW, pady=5)\n",
    "        \n",
    "        ttk.Label(main_frame, text=\"Frequência da Série:\").grid(row=4, column=0, sticky=tk.W, pady=5)\n",
    "        self.frequency = ttk.Combobox(main_frame, values=[\"Diária\", \"Mensal\", \"Anual\"])\n",
    "        self.frequency.set(\"Mensal\")\n",
    "        self.frequency.grid(row=4, column=1, sticky=tk.EW, pady=5)\n",
    "        \n",
    "        # Botão de cálculo\n",
    "        calculate_button = ttk.Button(main_frame, text=\"Gerar Relatório\", command=self.generate_report)\n",
    "        calculate_button.grid(row=5, column=0, columnspan=2, pady=20)\n",
    "        \n",
    "        # Configurar pesos das colunas\n",
    "        main_frame.columnconfigure(1, weight=1)\n",
    "        \n",
    "    def get_cdi_data(self, start_date, end_date):\n",
    "        \"\"\"Buscar dados do CDI na API do Banco Central\"\"\"\n",
    "        url = f\"https://api.bcb.gov.br/dados/serie/bcdata.sgs.4389/dados?formato=json&dataInicial={start_date}&dataFinal={end_date}\"\n",
    "        try:\n",
    "            response = requests.get(url)\n",
    "            response.raise_for_status()\n",
    "            data = response.json()\n",
    "            return pd.DataFrame(data)\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Erro\", f\"Erro ao obter dados do CDI: {str(e)}\")\n",
    "            return None\n",
    "    \n",
    "    def calculate_investment(self, cdi_data, initial_value, frequency):\n",
    "        \"\"\"Calcular evolução do investimento com base nas taxas do CDI\"\"\"\n",
    "        df = cdi_data.copy()\n",
    "        df['data'] = pd.to_datetime(df['data'], dayfirst=True)\n",
    "        df['valor'] = pd.to_numeric(df['valor']) / 100  # Converter para decimal\n",
    "        \n",
    "        # Calcular fator de retorno diário (assumindo 252 dias úteis por ano)\n",
    "        df['fator_diario'] = (1 + df['valor']) ** (1/252)\n",
    "        \n",
    "        # Calcular retorno acumulado\n",
    "        df['valor_acumulado'] = initial_value * df['fator_diario'].cumprod()\n",
    "        \n",
    "        # Reamostrar de acordo com a frequência\n",
    "        if frequency == \"Diária\":\n",
    "            result = df[['data', 'valor_acumulado']].copy()\n",
    "        elif frequency == \"Mensal\":\n",
    "            result = df.set_index('data').resample('M').last().reset_index()\n",
    "            result = result[['data', 'valor_acumulado']]\n",
    "        else:  # Anual\n",
    "            result = df.set_index('data').resample('Y').last().reset_index()\n",
    "            result = result[['data', 'valor_acumulado']]\n",
    "        \n",
    "        # Adicionar coluna de retorno\n",
    "        result['retorno'] = result['valor_acumulado'].pct_change().fillna(0)\n",
    "        \n",
    "        return result\n",
    "    \n",
    "    def generate_report(self):\n",
    "        \"\"\"Gerar relatório em PDF com a evolução do investimento\"\"\"\n",
    "        try:\n",
    "            # Obter valores informados pelo usuário\n",
    "            initial_value = float(self.initial_value.get().replace(',', '.'))\n",
    "            start_date = self.start_date.get()\n",
    "            end_date = self.end_date.get()\n",
    "            frequency = self.frequency.get()\n",
    "            \n",
    "            # Validar datas\n",
    "            start_date_dt = datetime.strptime(start_date, '%d/%m/%Y')\n",
    "            end_date_dt = datetime.strptime(end_date, '%d/%m/%Y')\n",
    "            \n",
    "            if end_date_dt <= start_date_dt:\n",
    "                messagebox.showerror(\"Erro\", \"Data final deve ser posterior à data inicial\")\n",
    "                return\n",
    "                \n",
    "            # Formatar datas para a API\n",
    "            api_start_date = start_date_dt.strftime('%d/%m/%Y')\n",
    "            api_end_date = end_date_dt.strftime('%d/%m/%Y')\n",
    "            \n",
    "            # Obter dados do CDI\n",
    "            cdi_data = self.get_cdi_data(api_start_date, api_end_date)\n",
    "            if cdi_data is None:\n",
    "                return\n",
    "                \n",
    "            # Calcular investimento\n",
    "            result = self.calculate_investment(cdi_data, initial_value, frequency)\n",
    "            \n",
    "            if result.empty:\n",
    "                messagebox.showerror(\"Erro\", \"Nenhum dado encontrado para o período especificado\")\n",
    "                return\n",
    "                \n",
    "            # Criar arquivo PDF\n",
    "            filename = f\"Relatorio_CDI_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf\"\n",
    "            with PdfPages(filename) as pdf:\n",
    "                # Criar figura para o relatório\n",
    "                plt.figure(figsize=(11, 8))\n",
    "                \n",
    "                # Gráfico 1: Evolução do investimento\n",
    "                plt.subplot(2, 1, 1)\n",
    "                plt.plot(result['data'], result['valor_acumulado'])\n",
    "                plt.title(f\"Evolução do Investimento CDI ({frequency})\\n{start_date} - {end_date}\")\n",
    "                plt.xlabel(\"Data\")\n",
    "                plt.ylabel(\"Valor (R$)\")\n",
    "                plt.grid(True)\n",
    "                \n",
    "                # Gráfico 2: Retornos\n",
    "                plt.subplot(2, 1, 2)\n",
    "                plt.bar(result['data'], result['retorno'] * 100)  # em porcentagem\n",
    "                plt.title(f\"Retornos {frequency}s\")\n",
    "                plt.xlabel(\"Data\")\n",
    "                plt.ylabel(\"Retorno (%)\")\n",
    "                plt.grid(True)\n",
    "                \n",
    "                plt.tight_layout()\n",
    "                pdf.savefig()\n",
    "                plt.close()\n",
    "                \n",
    "                # Criar página de texto com análise\n",
    "                plt.figure(figsize=(11, 8))\n",
    "                plt.axis('off')\n",
    "                \n",
    "                # Encontrar período mais rentável\n",
    "                max_ret = result['retorno'].max()\n",
    "                max_date = result.loc[result['retorno'] == max_ret, 'data'].iloc[0]\n",
    "                \n",
    "                total_return = (result['valor_acumulado'].iloc[-1] - initial_value) / initial_value * 100\n",
    "                \n",
    "                text_content = [\n",
    "                    f\"Relatório de Investimento CDI\",\n",
    "                    f\"Período: {start_date} a {end_date}\",\n",
    "                    f\"\",\n",
    "                    f\"Valor Inicial: R$ {initial_value:,.2f}\",\n",
    "                    f\"Valor Final: R$ {result['valor_acumulado'].iloc[-1]:,.2f}\",\n",
    "                    f\"Retorno Total: {total_return:.2f}%\",\n",
    "                    f\"\",\n",
    "                    f\"Período mais rentável:\",\n",
    "                    f\"Data: {max_date.strftime('%d/%m/%Y')}\",\n",
    "                    f\"Retorno: {max_ret*100:.2f}%\",\n",
    "                    f\"\",\n",
    "                    f\"Frequência da série: {frequency}\",\n",
    "                    f\"Data do relatório: {datetime.now().strftime('%d/%m/%Y %H:%M')}\"\n",
    "                ]\n",
    "                \n",
    "                plt.text(0.1, 0.95, \"\\n\".join(text_content), fontsize=12, verticalalignment='top')\n",
    "                pdf.savefig()\n",
    "                plt.close()\n",
    "                \n",
    "            messagebox.showinfo(\"Relatório Gerado\", f\"Relatório PDF gerado com sucesso:\\n{filename}\")\n",
    "            \n",
    "        except ValueError as e:\n",
    "            messagebox.showerror(\"Erro\", f\"Verifique os valores informados: {str(e)}\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Erro\", f\"Ocorreu um erro: {str(e)}\")\n",
    "    \n",
    "    def run(self):\n",
    "        self.root.mainloop()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app = CDIInvestmentCalculator()\n",
    "    app.run()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "299dc636-894d-4644-9c74-e8efca9f71e7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
